class Solution {
public:
    int calculate(string s) {
        int len = s.length();
        if(len == 0){
            return 0;
        }
        stack<int> st;
        int currentNumber = 0;
        char operation = '+';
        for(int i=0; i<len; i++){
            char currentChar = s[i];
            if(isdigit(currentChar)){
                currentNumber = (currentNumber * 10) + (currentChar - '0');
            }
            if(!isdigit(currentChar) && !iswspace(currentChar) || i == len-1){
                if(operation == '-'){
                    st.push(-currentNumber);
                }
                else if(operation == '+'){
                    st.push(currentNumber);
                }
                else if(operation == '*'){
                    int stackTop = st.top();
                    st.pop();
                    st.push(stackTop*currentNumber);
                }
                else if(operation == '/'){
                    int stackTop = st.top();
                    st.pop();
                    st.push(stackTop/currentNumber);
                }
                operation = currentChar;
                currentNumber = 0;
            }
        }
        int result = 0;
        while(st.size() != 0){
            result += st.top();
            st.pop();
        }
        return result;
    }
};


//T.C O(n)
//S.C O(n)
